name: 'Create Secret to GCP'
on:
  workflow_call:
    inputs:
      includes:
        description: List (comma-separated) of GitHub secret/vars names to include in the Cloud run
        type: string
        required: false
      gcp_project_id:
        description: GCP project id
        type: string
        required: false
        default: ai4nature
      resource_name:
        description: Product name eg. API, Job
        type: string
        required: true
    outputs:
      secrets:
        description: Github secrets in GCP format
        value: ${{ jobs.create.outputs.secrets }}
  
jobs:
  extract:
    outputs:
      extracted_secrets: ${{ steps.extract-secrets.outputs.extracted_secrets }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Extract secrets and convert to GCP format'
        id: extract-secrets
        env:
          SECRETS_JSON: ${{ toJson(secrets) }}
          PROJECT_ID: ${{ inputs.gcp_project_id }}
        run: |
          resource_name=${{ inputs.resource_name }}
          keys=${{ inputs.includes }}
          result=''
          if [ ${#keys[@]} ]; then
            for key in ${keys//,/ }
            do
                value=$(echo "$SECRETS_JSON" | jq -r ".$key")
                if [[ "$value" == "null" ]]; then
                    echo "$key not found in GitHub secrets. Abort!"
                    exit 1
                fi
                echo "Found: $key"
                result+="${key^^}:$PROJECT_ID/${resource_name}_${key}
                "
            done
          fi
          echo "extracted_secrets<<EOF" >> $GITHUB_OUTPUT
          echo "$result" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create:
    outputs:
      secrets: ${{ steps.secrets.outputs.secrets}}
    runs-on: ubuntu-latest
    needs: [extract]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: 'GCP auth'
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_NAME }}
          service_account: ${{ secrets.CICD_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      # (get-secrets) step will failed if not-existing secret is passed so we need continue-on-error: true here.
      - name: 'Get existing secrets'
        continue-on-error: true
        id: get-secrets
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: "${{ needs.extract.outputs.extracted_secrets }}"

      # keys already are filtered from (extract) job so no need to redo it.
      # if new secret is different to current secret then update it
      # if current secret is empty then create it
      - name: 'Extract secrets and create to GCP'
        id: secrets
        env:
          SECRETS_JSON: ${{ toJson(secrets) }}
          PROJECT_ID: ${{ inputs.gcp_project_id }}
          EXTRACTED_SECRETS: ${{ toJson(steps.get-secrets.outputs) }}
        run: |
          resource_name=${{ inputs.resource_name }}
          keys=${{ inputs.includes }}
          result=''
          if [ ${#keys[@]} ]; then
            for key in ${keys//,/ }
            do
                new_value=$(echo "$SECRETS_JSON" | jq -r ".$key")
                current_value=$(echo "$EXTRACTED_SECRETS" | jq -r ".$key")

                if [[ "$new_value" != "$current_value" ]] && [[ "$current_value" != "null" ]]; then
                  echo -n "$new_value" | gcloud secrets versions add ${resource_name}_${key} \
                  --data-file=- \
                    --project=$PROJECT_ID
                elif [[ "$current_value" == "null" ]]; then
                  echo -n "$new_value" | gcloud secrets create ${resource_name}_${key} \
                    --replication-policy="automatic" \
                    --project=$PROJECT_ID
                  echo -n "$new_value" | gcloud secrets versions add ${resource_name}_${key} \
                    --data-file=- \
                    --project=$PROJECT_ID
                fi

                result+="${key^^}=${resource_name}_${key}:latest,"
            done
          fi
          echo "secrets=$result" >> "$GITHUB_OUTPUT"
